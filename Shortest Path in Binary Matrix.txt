class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        if(grid[0][0]==1||grid[m-1][n-1]==1){
            return -1;
        }
        vector<pair<int,int>> v{{-1,0},{0,-1},{1,0},{0,1},{1,-1},{-1,1},{-1,-1},{1,1}};
        queue<pair<int,int>> q;
        q.push({0,0});
        vector<vector<int>> dist(m,vector<int>(n,1));
        while(!q.empty()){
            auto p=q.front();
            q.pop();
            if(p.first==m-1&&p.second==n-1){
                return dist[p.first][p.second];
            }
            for(auto k:v){
                int i=p.first+k.first;
                int j=p.second+k.second;
                if(i<m&&i>=0&&j<n&&j>=0&&grid[i][j]==0&&dist[i][j]==1){
                    dist[i][j]=dist[p.first][p.second]+1;
                    q.push({i,j});
                }
            }
        }
        if(dist[m-1][n-1]==1){
            return -1;
        }
        return dist[m-1][n-1];
    }
};